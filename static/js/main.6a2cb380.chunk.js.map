{"version":3,"sources":["components/SingleTown.module.css","components/SearchComponent.module.css","components/SearchComponent.js","firebase.js","components/SingleTown.js","containers/StartView.js","components/ResultsComponent.js","containers/ResultsScreen.js","App.js","serviceWorker.js","index.js","components/ResultsComponent.module.css"],"names":["module","exports","SearchComponent","history","useHistory","useState","query","setQuery","Fragment","onSubmit","event","push","preventDefault","className","classes","searchBox","id","type","searchBar","placeholder","onChange","e","target","value","required","mainBtn","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","SingleTown","propsCity","api","city","setCity","useEffect","fetch","name","then","response","json","result","realId","main","weatherResults","locationBox","sys","country","weatherBox","src","weather","icon","alt","weatherBoxInfo","description","temp","Math","round","realFeel","feels_like","wind","speed","onClick","firestore","collection","doc","delete","unfollowBtn","StartView","cities","setCities","onSnapshot","snapshot","citiesData","forEach","data","style","map","key","ResultsComponent","setWeather","useParams","trim","temp_min","temp_max","pressure","humidity","followCity","add","returnBtn","ResultsScreen","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,eAAiB,mCAAmC,YAAc,gCAAgC,WAAa,+BAA+B,eAAiB,mCAAmC,KAAO,yBAAyB,SAAW,6BAA6B,QAAU,4BAA4B,YAAc,kC,mBCAhVD,EAAOC,QAAU,CAAC,UAAY,mCAAmC,UAAY,mCAAmC,QAAU,mC,wNCiC3GC,MA7Bf,WACE,IAAIC,EAAUC,cADW,EAGCC,mBAAS,IAHV,mBAGlBC,EAHkB,KAGXC,EAHW,KAWzB,OACE,kBAAC,IAAMC,SAAP,KACE,0BAAMC,SARa,SAACC,GACtBP,EAAQQ,KAAK,YAAcL,GAC3BI,EAAME,iBACNL,EAAS,KAKyBM,UAAWC,IAAQC,UAAWC,GAAG,UAC/D,2BACEA,GAAG,QACHC,KAAK,OACLJ,UAAWC,IAAQI,UACnBC,YAAY,oBACZC,SAAU,SAAAC,GAAC,OAAId,EAASc,EAAEC,OAAOC,QACjCA,MAAOjB,EACPkB,UAAQ,IAEV,4BAAQP,KAAK,SAASJ,UAAWC,IAAQW,SAAzC,iB,iBCfRC,IAASC,cAXM,CACbC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKFT,QAAf,E,iBC2CeU,MApDf,YAAoC,IAAdC,EAAa,EAAbA,UAEdC,EACE,2CADFA,EAEC,mCAJ0B,EAOTjC,mBAAS,IAPA,mBAO1BkC,EAP0B,KAOpBC,EAPoB,KAuBjC,OAdAC,qBAAU,WACRC,MAAM,GAAD,OAAIJ,EAAJ,qBAAyBD,EAAUM,KAAnC,uCAAsEL,IACxEM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJA,EAAM,2BAAQA,GAAR,IAAgBC,OAAQX,EAAUrB,KACxCwB,EAAQO,QAEX,CAACT,EAAUD,EAAWC,IAQvB,oCAEKC,EAAKU,KACJ,yBAAMpC,UAAWC,IAAQoC,gBACvB,yBAAKrC,UAAWC,IAAQqC,aACrBZ,EAAKI,KADR,KACgBJ,EAAKa,IAAIC,SAEzB,yBAAKxC,UAAWC,IAAQwC,YACtB,yBAAKC,IAAG,2CAAsChB,EAAKiB,QAAQ,GAAGC,KAAtD,WAAqEC,IAAI,KACjF,yBAAK7C,UAAWC,IAAQ6C,gBACtB,yBAAK9C,UAAWC,IAAQ0C,SAAUjB,EAAKiB,QAAQ,GAAGI,aAClD,yBAAK/C,UAAWC,IAAQ+C,MAAOC,KAAKC,MAAMxB,EAAKU,KAAKY,MAApD,UACA,yBAAKhD,UAAWC,IAAQkD,UAAxB,UAA0CF,KAAKC,MAAMxB,EAAKU,KAAKgB,YAA/D,UACA,yBAAKpD,UAAWC,IAAQkD,UAAxB,WAA2CF,KAAKC,MAAwB,IAAlBxB,EAAK2B,KAAKC,OAAhE,WAGJ,4BAAQC,QAtBO,WACZ1C,EAAS2C,YACjBC,WAAW,UAAUC,IAAIhC,EAAKS,QAAQwB,UAoBE3D,UAAWC,IAAQ2D,aAAtD,oBAGF,4CChBKC,MAzBf,WAAsB,IAAD,EAESrE,mBAAS,IAFlB,mBAEZsE,EAFY,KAEJC,EAFI,KAarB,OATEnC,qBAAU,WAER,OADWf,EAAS2C,YACVC,WAAW,UAAUO,YAAW,SAACC,GACzC,IAAMC,EAAa,GACnBD,EAASE,SAAQ,SAAAT,GAAG,OAAIQ,EAAWpE,KAAX,2BAAsB4D,EAAIU,QAA1B,IAAkCjE,GAAIuD,EAAIvD,SAClE4D,EAAUG,QAEX,IAGH,oCACE,kBAAC,EAAD,MACA,yBAAKG,MAAO,CAAE,MAAS,UAEnBP,EAAOQ,KAAI,SAAA5C,GAAI,OAAI,kBAAC,EAAD,CAAYF,UAAWE,EAAM6C,IAAK7C,EAAKvB,W,gBC0CnDqE,MA/Df,WACE,IAAM/C,EACE,2CADFA,EAEC,mCAHmB,EAMIjC,mBAAS,IANb,mBAMnBmD,EANmB,KAMV8B,EANU,KAQpBtE,EAAOuE,cAAPvE,GAENyB,qBAAU,WACRC,MAAM,GAAD,OAAIJ,EAAJ,qBAAyBtB,EAAGwE,OAA5B,uCAAiElD,IACnEM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJuC,EAAWvC,QAEd,CAAC/B,EAAIsB,EAAUA,IAElB,IAOInC,EAAUC,cAMd,OACE,kBAAC,IAAMI,SAAP,KAEIgD,EAAQP,KACN,oCACE,yBAAKpC,UAAWC,IAAQoC,gBACtB,yBAAKrC,UAAWC,IAAQqC,aACrBK,EAAQb,KADX,KACmBa,EAAQJ,IAAIC,SAE/B,yBAAKxC,UAAWC,IAAQwC,YACtB,yBAAKC,IAAG,2CAAsCC,EAAQA,QAAQ,GAAGC,KAAzD,WAAwEC,IAAI,KACpF,yBAAK7C,UAAWC,IAAQ6C,gBACtB,yBAAK9C,UAAWC,IAAQ0C,SAAUA,EAAQA,QAAQ,GAAGI,aACrD,yBAAK/C,UAAWC,IAAQ+C,MAAOC,KAAKC,MAAMP,EAAQP,KAAKY,MAAvD,UACA,yBAAKhD,UAAWC,IAAQkD,UAAxB,UAA0CF,KAAKC,MAAMP,EAAQP,KAAKgB,YAAlE,UACA,yBAAKpD,UAAWC,IAAQkD,UAAxB,WAA2CF,KAAKC,MAA2B,IAArBP,EAAQU,KAAKC,OAAnE,SACA,yBAAKtD,UAAWC,IAAQkD,UAAxB,cAA8CF,KAAKC,MAAMP,EAAQP,KAAKwC,UAAtE,UACA,yBAAK5E,UAAWC,IAAQkD,UAAxB,eAA+CF,KAAKC,MAAMP,EAAQP,KAAKyC,UAAvE,UACA,yBAAK7E,UAAWC,IAAQkD,UAAxB,eAA+CF,KAAKC,MAAMP,EAAQP,KAAK0C,UAAvE,QACA,yBAAK9E,UAAWC,IAAQkD,UAAxB,UAA0CF,KAAKC,MAAMP,EAAQP,KAAK2C,UAAlE,QAGJ,4BAAQ/E,UAAWC,IAAQ+E,WAAYzB,QAnCvB,SAAC/C,GAC3BA,EAAET,iBACSc,EAAS2C,YACjBC,WAAW,UAAUwB,IAAI,CAAEnD,KAAM3B,IACpCb,EAAQQ,KAAK,OA+BH,eAEF,4BAAQE,UAAWC,IAAQiF,UAAW3B,QA5B7B,WACjBjE,EAAQQ,KAAK,OA2BL,WAEA,KChDGqF,MATf,WACE,OACE,kBAAC,IAAMxF,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCaSyF,MAff,WAGE,OACE,yBAAKpF,UAAU,kBACb,kBAAC,IAAD,CAAQqF,SAAUC,gBAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5B,IACjC,kBAAC,IAAD,CAAO2B,KAAK,eAAeC,UAAWN,QCH5BO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BzH,EAAOC,QAAU,CAAC,eAAiB,yCAAyC,YAAc,sCAAsC,WAAa,qCAAqC,eAAiB,yCAAyC,KAAO,+BAA+B,SAAW,mCAAmC,QAAU,kCAAkC,WAAa,qCAAqC,UAAY,uC","file":"static/js/main.6a2cb380.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherResults\":\"SingleTown_weatherResults__1T3WP\",\"locationBox\":\"SingleTown_locationBox__3a4Bb\",\"weatherBox\":\"SingleTown_weatherBox__O1TG3\",\"weatherBoxInfo\":\"SingleTown_weatherBoxInfo__33lkc\",\"temp\":\"SingleTown_temp__2p3jV\",\"realFeel\":\"SingleTown_realFeel__1V9hI\",\"weather\":\"SingleTown_weather__2ckJk\",\"unfollowBtn\":\"SingleTown_unfollowBtn__3VX_r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBox\":\"SearchComponent_searchBox__1ZxWF\",\"searchBar\":\"SearchComponent_searchBar__VEl_O\",\"mainBtn\":\"SearchComponent_mainBtn__2q34n\"};","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport classes from './SearchComponent.module.css';\r\n// import cities from '../data/city.list.json';\r\n\r\nfunction SearchComponent() {\r\n  let history = useHistory();\r\n\r\n  const [query, setQuery] = useState('');\r\n\r\n  const toHandleSubmit = (event) => {\r\n    history.push(\"/results/\" + query);\r\n    event.preventDefault();\r\n    setQuery('');\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form onSubmit={toHandleSubmit} className={classes.searchBox} id=\"parent\">\r\n        <input\r\n          id=\"child\"\r\n          type=\"text\"\r\n          className={classes.searchBar}\r\n          placeholder=\"Tra탑ilica...\"\r\n          onChange={e => setQuery(e.target.value)}\r\n          value={query}\r\n          required\r\n        />\r\n        <button type=\"submit\" className={classes.mainBtn}>Tra탑i</button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default SearchComponent;","import firebase from 'firebase';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBh2etBvLFs4qsw69fgMOZT0RXHmVxlAac\",\r\n  authDomain: \"weather-4dddd.firebaseapp.com\",\r\n  databaseURL: \"https://weather-4dddd.firebaseio.com\",\r\n  projectId: \"weather-4dddd\",\r\n  storageBucket: \"weather-4dddd.appspot.com\",\r\n  messagingSenderId: \"982882592096\",\r\n  appId: \"1:982882592096:web:8df32e183b0e49a372ea05\",\r\n  measurementId: \"G-9WJPLL0EPF\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport classes from './SingleTown.module.css';\r\nimport firebase from '../firebase';\r\n\r\nfunction SingleTown({ propsCity }) {\r\n\r\n  const api = {\r\n    base: \"https://api.openweathermap.org/data/2.5/\",\r\n    key: \"26f7c14de162ddf380af26c56863bd3a\"\r\n  }\r\n\r\n  const [city, setCity] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetch(`${api.base}weather?q=${propsCity.name}&units=metric&lang=hr&appid=${api.key}`)\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        result = { ...result, realId: propsCity.id }\r\n        setCity(result)\r\n      })\r\n  }, [api.base, propsCity, api.key])\r\n\r\n  const handleRemoveCity = () => {\r\n    const db = firebase.firestore();\r\n    db.collection('cities').doc(city.realId).delete()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n         city.main ?\r\n          < div className={classes.weatherResults} >\r\n            <div className={classes.locationBox}>\r\n              {city.name}, {city.sys.country}\r\n            </div>\r\n            <div className={classes.weatherBox}>\r\n              <img src={`http://openweathermap.org/img/wn/${city.weather[0].icon}@2x.png`} alt=\"\" />\r\n              <div className={classes.weatherBoxInfo}>\r\n                <div className={classes.weather}>{city.weather[0].description}</div>\r\n                <div className={classes.temp}>{Math.round(city.main.temp)} 째C</div>\r\n                <div className={classes.realFeel}>Dojam: {Math.round(city.main.feels_like)} 째C</div>\r\n                <div className={classes.realFeel}>Vjetar: {Math.round(city.wind.speed * 3.6)} km/h</div>\r\n              </div>\r\n            </div>\r\n            <button onClick={handleRemoveCity} className={classes.unfollowBtn}>Prestani pratit</button>\r\n          </div >\r\n          :\r\n          <h1>Loading...</h1>\r\n      }\r\n\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SingleTown;\r\n\r\n/*< div className={classes.weatherResults} >\r\n        <div className={classes.locationBox}>\r\n          {city.name}, {city.sys.country}\r\n        </div>\r\n        <div className={classes.weatherBox}>\r\n          <img src={`http://openweathermap.org/img/wn/${city.weather[0].icon}@2x.png`} alt=\"\" />\r\n          <div className={classes.weatherBoxInfo}>\r\n            <div className={classes.weather}>{city.weather[0].description}</div>\r\n            <div className={classes.temp}>{Math.round(city.main.temp)} 째C</div>\r\n            <div className={classes.realFeel}>Dojam: {Math.round(city.main.feels_like)} 째C</div>\r\n            <div className={classes.realFeel}>Vjetar: {Math.round(city.wind.speed * 3.6)} km/h</div>\r\n          </div>\r\n        </div>\r\n      </div > */","import React from 'react';\r\nimport '../App.css';\r\nimport SearchComponent from '../components/SearchComponent';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport firebase from '../firebase';\r\nimport SingleTown from '../components/SingleTown';\r\n\r\nfunction StartView() {\r\n\r\n  const [cities, setCities] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const db = firebase.firestore()\r\n    return db.collection('cities').onSnapshot((snapshot) => {\r\n      const citiesData = []\r\n      snapshot.forEach(doc => citiesData.push(({ ...doc.data(), id: doc.id })))\r\n      setCities(citiesData);\r\n    })\r\n  }, [])\r\n\r\nreturn (\r\n  <>\r\n    <SearchComponent />\r\n    <div style={{ 'color': 'white' }}>\r\n      {\r\n        cities.map(city => <SingleTown propsCity={city} key={city.id} />)\r\n      }\r\n    </div>\r\n  </>\r\n)\r\n}\r\n\r\nexport default StartView;","import React, { useEffect, useState } from 'react'\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport classes from './ResultsComponent.module.css'\r\nimport firebase from '../firebase';\r\n\r\nfunction ResultsComponent() {\r\n  const api = {\r\n    base: \"https://api.openweathermap.org/data/2.5/\",\r\n    key: \"26f7c14de162ddf380af26c56863bd3a\"\r\n  }\r\n\r\n  const [weather, setWeather] = useState({});\r\n\r\n  let { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    fetch(`${api.base}weather?q=${id.trim()}&units=metric&lang=hr&appid=${api.key}`)\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        setWeather(result)\r\n      })\r\n  }, [id, api.base, api.key])\r\n\r\n  const saveCityToFirestore = (e) => {\r\n    e.preventDefault();\r\n    const db = firebase.firestore()\r\n    db.collection('cities').add({ name: id })\r\n    history.push('/');\r\n  }\r\n\r\n  let history = useHistory();\r\n\r\n  const returnHome = () => {\r\n    history.push('/');\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        weather.main ?\r\n          <>\r\n            <div className={classes.weatherResults}>\r\n              <div className={classes.locationBox}>\r\n                {weather.name}, {weather.sys.country}\r\n              </div>\r\n              <div className={classes.weatherBox}>\r\n                <img src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt=\"\" />\r\n                <div className={classes.weatherBoxInfo}>\r\n                  <div className={classes.weather}>{weather.weather[0].description}</div>\r\n                  <div className={classes.temp}>{Math.round(weather.main.temp)} 째C</div>\r\n                  <div className={classes.realFeel}>Dojam: {Math.round(weather.main.feels_like)} 째C</div>\r\n                  <div className={classes.realFeel}>Vjetar: {Math.round(weather.wind.speed * 3.6)} km/h</div>\r\n                  <div className={classes.realFeel}>Minimalno: {Math.round(weather.main.temp_min)} 째C</div>\r\n                  <div className={classes.realFeel}>Maksimalno: {Math.round(weather.main.temp_max)} 째C</div>\r\n                  <div className={classes.realFeel}>Tlak zraka: {Math.round(weather.main.pressure)} hPa</div>\r\n                  <div className={classes.realFeel}>Vlaga: {Math.round(weather.main.humidity)} %</div>\r\n                </div>\r\n              </div>\r\n              <button className={classes.followCity} onClick={saveCityToFirestore}>Prati grad</button>\r\n            </div>\r\n            <button className={classes.returnBtn} onClick={returnHome}>Natrag</button>\r\n          </>\r\n          : ''\r\n      }</React.Fragment>\r\n  )\r\n\r\n}\r\n\r\nexport default ResultsComponent;","import React from 'react';\r\nimport ResultsComponent from '../components/ResultsComponent';\r\nimport SearchComponent from '../components/SearchComponent';\r\n\r\n\r\nfunction ResultsScreen() {\r\n  return (\r\n    <React.Fragment>\r\n      <SearchComponent />\r\n      <ResultsComponent />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ResultsScreen;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport StartView from './containers/StartView';\nimport ResultsScreen from './containers/ResultsScreen';\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"main-container\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={StartView} />\n          <Route path=\"/results/:id\" component={ResultsScreen} />\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherResults\":\"ResultsComponent_weatherResults__32oH6\",\"locationBox\":\"ResultsComponent_locationBox__2MlCJ\",\"weatherBox\":\"ResultsComponent_weatherBox__fX3xQ\",\"weatherBoxInfo\":\"ResultsComponent_weatherBoxInfo__mMceh\",\"temp\":\"ResultsComponent_temp__3ErZq\",\"realFeel\":\"ResultsComponent_realFeel__1UUoA\",\"weather\":\"ResultsComponent_weather__5LnJo\",\"followCity\":\"ResultsComponent_followCity__1E5Ei\",\"returnBtn\":\"ResultsComponent_returnBtn__1P3-W\"};"],"sourceRoot":""}