{"version":3,"sources":["components/SearchComponent.module.css","components/SearchComponent.js","containers/SearchScreen.js","components/ResultsComponent.js","containers/ResultsScreen.js","App.js","serviceWorker.js","index.js","components/ResultsComponent.module.css"],"names":["module","exports","SearchComponent","history","useHistory","useState","query","setQuery","Fragment","onSubmit","event","push","preventDefault","className","classes","searchBox","id","type","searchBar","placeholder","onChange","e","target","value","required","mainBtn","SearchScreen","ResultsComponent","api","weather","setWeather","useParams","useEffect","fetch","then","response","json","result","main","locationBox","name","sys","country","weatherBox","src","icon","alt","weatherBoxInfo","temp","Math","round","realFeel","feels_like","description","ResultsScreen","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,UAAY,mCAAmC,UAAY,mCAAmC,QAAU,mC,+MCgC3GC,MA7Bf,WACE,IAAIC,EAAUC,cADW,EAGCC,mBAAS,IAHV,mBAGlBC,EAHkB,KAGXC,EAHW,KAWzB,OACE,kBAAC,IAAMC,SAAP,KACE,0BAAMC,SARa,SAACC,GACtBP,EAAQQ,KAAK,YAAcL,GAC3BI,EAAME,iBACNL,EAAS,KAKyBM,UAAWC,IAAQC,UAAWC,GAAG,UAC/D,2BACEA,GAAG,QACHC,KAAK,OACLJ,UAAWC,IAAQI,UACnBC,YAAY,oBACZC,SAAU,SAAAC,GAAC,OAAId,EAASc,EAAEC,OAAOC,QACjCA,MAAOjB,EACPkB,UAAQ,IAEV,4BAAQP,KAAK,SAASJ,UAAWC,IAAQW,SAAzC,iBCfOC,MARf,WACE,OACE,kBAAC,IAAMlB,SAAP,KACE,kBAAC,EAAD,Q,gBCqCSmB,MAxCf,WACE,IAAMC,EACE,0CADFA,EAEC,mCAHmB,EAMIvB,mBAAS,IANb,mBAMnBwB,EANmB,KAMVC,EANU,KAQpBd,EAAOe,cAAPf,GAUN,OARAgB,qBAAU,WACRC,MAAM,GAAD,OAAIL,EAAJ,qBAAyBZ,EAAzB,uCAA0DY,IAC5DM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJP,EAAWO,QAEd,CAACrB,EAAIY,EAAUA,IAGhB,6BAC0B,oBAAhBC,EAAQS,KACd,kBAAC,IAAM9B,SAAP,KACE,yBAAKK,UAAWC,IAAQyB,aACrBV,EAAQW,KADX,KACmBX,EAAQY,IAAIC,SAE/B,yBAAK7B,UAAWC,IAAQ6B,YACtB,yBAAKC,IAAG,2CAAsCf,EAAQA,QAAQ,GAAGgB,KAAzD,WAAwEC,IAAI,KACpF,yBAAKjC,UAAWC,IAAQiC,gBACtB,yBAAKlC,UAAWC,IAAQkC,MAAOC,KAAKC,MAAMrB,EAAQS,KAAKU,MAAvD,UACA,yBAAKnC,UAAWC,IAAQqC,UAAxB,cAA8CtB,EAAQS,KAAKc,WAA3D,UACA,yBAAKvC,UAAWC,IAAQe,SAAUA,EAAQA,QAAQ,GAAGwB,gBAIzD,KCxBKC,MATf,WACE,OACE,kBAAC,IAAM9C,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCUS+C,MAbf,WACE,OACE,yBAAK1C,UAAU,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,IAAIC,UAAWhC,IACjC,kBAAC,IAAD,CAAO+B,KAAK,eAAeC,UAAWJ,QCA5BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5B7E,EAAOC,QAAU,CAAC,YAAc,sCAAsC,WAAa,qCAAqC,eAAiB,yCAAyC,KAAO,+BAA+B,SAAW,mCAAmC,QAAU,qC","file":"static/js/main.95a864e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBox\":\"SearchComponent_searchBox__1ZxWF\",\"searchBar\":\"SearchComponent_searchBar__VEl_O\",\"mainBtn\":\"SearchComponent_mainBtn__2q34n\"};","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport classes from './SearchComponent.module.css';\r\n\r\nfunction SearchComponent() {\r\n  let history = useHistory();\r\n\r\n  const [query, setQuery] = useState('');\r\n\r\n  const toHandleSubmit = (event) => {\r\n    history.push(\"/results/\" + query);\r\n    event.preventDefault();\r\n    setQuery('');\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form onSubmit={toHandleSubmit} className={classes.searchBox} id=\"parent\">\r\n        <input\r\n          id=\"child\"\r\n          type=\"text\"\r\n          className={classes.searchBar}\r\n          placeholder=\"Tra탑ilica...\"\r\n          onChange={e => setQuery(e.target.value)}\r\n          value={query}\r\n          required\r\n        />\r\n        <button type=\"submit\" className={classes.mainBtn}>Tra탑i</button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default SearchComponent;","import React from 'react';\r\nimport '../App.css';\r\nimport SearchComponent from '../components/SearchComponent';\r\n\r\nfunction SearchScreen() {\r\n  return(\r\n    <React.Fragment>\r\n      <SearchComponent />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default SearchScreen;","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport classes from './ResultsComponent.module.css'\r\n\r\nfunction ResultsComponent() {\r\n  const api = {\r\n    base: \"http://api.openweathermap.org/data/2.5/\",\r\n    key: \"26f7c14de162ddf380af26c56863bd3a\"\r\n  }\r\n\r\n  const [weather, setWeather] = useState({});\r\n\r\n  let { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    fetch(`${api.base}weather?q=${id}&units=metric&lang=hr&appid=${api.key}`)\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        setWeather(result)\r\n      })\r\n  }, [id, api.base, api.key])\r\n\r\n  return (\r\n    <div>{\r\n      (typeof weather.main != \"undefined\") ?\r\n        <React.Fragment>\r\n          <div className={classes.locationBox}>\r\n            {weather.name}, {weather.sys.country}\r\n          </div>\r\n          <div className={classes.weatherBox}>\r\n            <img src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt=\"\" />\r\n            <div className={classes.weatherBoxInfo}>\r\n              <div className={classes.temp}>{Math.round(weather.main.temp)} 째C</div>\r\n              <div className={classes.realFeel}>Real feel: {weather.main.feels_like} 째C</div>\r\n              <div className={classes.weather}>{weather.weather[0].description}</div>\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n        : ''\r\n    }</div>\r\n  )\r\n\r\n}\r\n\r\nexport default ResultsComponent;","import React from 'react';\r\nimport ResultsComponent from '../components/ResultsComponent';\r\nimport SearchComponent from '../components/SearchComponent';\r\n\r\n\r\nfunction ResultsScreen() {\r\n  return (\r\n    <React.Fragment>\r\n      <SearchComponent />\r\n      <ResultsComponent />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ResultsScreen;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport SearchScreen from './containers/SearchScreen';\nimport ResultsScreen from './containers/ResultsScreen';\n\nfunction App() {\n  return (\n    <div className=\"main-container\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={SearchScreen} />\n          <Route path=\"/results/:id\" component={ResultsScreen} />\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"locationBox\":\"ResultsComponent_locationBox__2MlCJ\",\"weatherBox\":\"ResultsComponent_weatherBox__fX3xQ\",\"weatherBoxInfo\":\"ResultsComponent_weatherBoxInfo__mMceh\",\"temp\":\"ResultsComponent_temp__3ErZq\",\"realFeel\":\"ResultsComponent_realFeel__1UUoA\",\"weather\":\"ResultsComponent_weather__5LnJo\"};"],"sourceRoot":""}