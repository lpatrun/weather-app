{"version":3,"sources":["components/SearchComponent.js","firebase.js","components/SingleTown.js","containers/StartView.js","components/ResultsComponent.js","containers/ResultsScreen.js","components/DetailedTown.js","containers/DetailedView.js","containers/AuthView.js","App.js","serviceWorker.js","index.js"],"names":["SearchComponent","history","useHistory","useState","cities","filter","city","country","hrGradovi","gradoviZaSelect","setGradoviZaSelect","query","setQuery","underlay","setUnderlay","className","onClick","onSubmit","event","push","preventDefault","type","placeholder","onChange","e","target","value","toLowerCase","grad","name","startsWith","sort","a","b","localeCompare","required","map","key","id","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","SingleTown","propsCity","api","setCity","useEffect","fetch","then","response","json","result","realId","main","sys","src","weather","icon","alt","description","Math","round","temp","feels_like","wind","speed","firestore","collection","doc","delete","to","StartView","setCities","selectedCity","setSelectedCity","onSnapshot","snapshot","citiesData","forEach","data","naem","ResultsComponent","setWeather","useParams","trim","temp_max","temp_min","pressure","humidity","add","ResultsScreen","DetailedTown","weatherReport","list","hour","date","Date","dt","title","getHours","getDate","getMonth","getFullYear","DetailedView","AuthView","email","setEmail","password","setPassword","console","log","htmlFor","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a65ff600.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport '../App.css';\r\nimport cities from '../data/city.list.json';\r\n\r\nfunction SearchComponent() {\r\n\r\n  let history = useHistory();\r\n\r\n  const [hrGradovi] = useState(cities.filter(city => city.country === \"HR\"));\r\n  const [gradoviZaSelect, setGradoviZaSelect] = useState([]);\r\n  const [query, setQuery] = useState('');\r\n  const [underlay, setUnderlay] = useState(false)\r\n\r\n  const handleChange = (e) => {\r\n    setQuery(e.target.value.toLowerCase());\r\n    if (e.target.value) {\r\n      setGradoviZaSelect(\r\n        hrGradovi.filter(\r\n          grad => grad.name.toLowerCase().startsWith(e.target.value)\r\n        )\r\n          .sort((a, b) => a.name.localeCompare(b.name))\r\n      )\r\n      setUnderlay(true)\r\n    } else {\r\n      setGradoviZaSelect([]);\r\n      setUnderlay(false)\r\n    }\r\n  }\r\n\r\n  const toHandleSubmit = (event) => {\r\n    history.push(\"/results/\" + query);\r\n    event.preventDefault();\r\n    setQuery('');\r\n  }\r\n\r\n  const toSelectTown = (city) => {\r\n    setUnderlay(false);\r\n    history.push(\"/results/\" + city);\r\n    setQuery('');\r\n  }\r\n\r\n  return (\r\n    <div className=\"searchContainer\">\r\n      {\r\n        underlay &&\r\n        <div className=\"underly\" onClick={() => { setUnderlay(false); }}></div>\r\n      }\r\n      <form onSubmit={toHandleSubmit} className=\"searchBox\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"searchBar\"\r\n          placeholder=\"TraÅ¾ilica...\"\r\n          onChange={handleChange}\r\n          value={query}\r\n          required\r\n        />\r\n\r\n        <button type=\"submit\" className=\"mainBtn\">TraÅ¾i</button>\r\n\r\n        {underlay &&\r\n          <div className=\"autosuggestion\">\r\n            {gradoviZaSelect.map(grad =>\r\n              <div\r\n                className=\"autosuggestionItem\"\r\n                key={grad.id}\r\n                onClick={() => toSelectTown(grad.name)}>\r\n                {grad.name}\r\n              </div>)\r\n            }\r\n          </div>\r\n        }\r\n      </form>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchComponent;","import firebase from 'firebase/app';\r\nimport 'firebase/firestore'; \r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBh2etBvLFs4qsw69fgMOZT0RXHmVxlAac\",\r\n  authDomain: \"weather-4dddd.firebaseapp.com\",\r\n  databaseURL: \"https://weather-4dddd.firebaseio.com\",\r\n  projectId: \"weather-4dddd\",\r\n  storageBucket: \"weather-4dddd.appspot.com\",\r\n  messagingSenderId: \"982882592096\",\r\n  appId: \"1:982882592096:web:8df32e183b0e49a372ea05\",\r\n  measurementId: \"G-9WJPLL0EPF\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../App.css';\r\nimport firebase from '../firebase';\r\n\r\nfunction SingleTown({ propsCity }) {\r\n\r\n  const api = {\r\n    base: \"https://api.openweathermap.org/data/2.5/\",\r\n    key: \"26f7c14de162ddf380af26c56863bd3a\"\r\n  }\r\n\r\n  const [city, setCity] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetch(`${api.base}weather?q=${propsCity.name}&units=metric&lang=hr&appid=${api.key}`)\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        result = { ...result, realId: propsCity.id }\r\n        setCity(result)\r\n      })\r\n  }, [api.base, propsCity, api.key])\r\n\r\n  const handleRemoveCity = () => {\r\n    const db = firebase.firestore();\r\n    db.collection('cities').doc(city.realId).delete()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        city.main ?\r\n          < div className=\"weatherResults\" >\r\n            <div className=\"locationBox\">\r\n              {city.name}, {city.sys.country}\r\n            </div>\r\n            <div className=\"weatherBox\">\r\n              <img src={`https://openweathermap.org/img/wn/${city.weather[0].icon}@4x.png`} alt={city.name} />\r\n              <div className=\"weatherBoxInfo\">\r\n                <div className=\"weather\">{city.weather[0].description}</div>\r\n                <div className=\"temp\">{Math.round(city.main.temp)} Â°C</div>\r\n                <div className=\"realFeel\">\r\n                  Dojam: {Math.round(city.main.feels_like)} Â°C<br></br>\r\n                  Vjetar: {Math.round(city.wind.speed * 3.6)} km/h\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"options\">\r\n              <button className=\"unfollowBtn\" onClick={handleRemoveCity}>Otprati</button>\r\n              <Link\r\n                to={'details/name=' + city.name}\r\n                className=\"details\">Detalji\r\n            </Link>\r\n            </div>\r\n          </div >\r\n          :\r\n          <div className=\"loader\">Loading...</div>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SingleTown;","import React from 'react';\r\nimport '../App.css';\r\nimport SearchComponent from '../components/SearchComponent';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport firebase from '../firebase';\r\nimport SingleTown from '../components/SingleTown';\r\n\r\nfunction StartView() {\r\n\r\n  const [cities, setCities] = useState([]);\r\n  const [selectedCity, setSelectedCity] = useState({});\r\n\r\n  useEffect(() => {\r\n    const db = firebase.firestore()\r\n    return db.collection('cities').onSnapshot((snapshot) => {\r\n      const citiesData = []\r\n      snapshot.forEach(doc => citiesData.push(({ ...doc.data(), id: doc.id })))\r\n      setCities(citiesData);\r\n      setSelectedCity({ name: citiesData[0].name, id: citiesData[0].id })\r\n    })\r\n  }, [])\r\n\r\n  const cityToDisplay = (naem, id) => {\r\n    setSelectedCity({ name: naem, id: id })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <SearchComponent />\r\n      <div className=\"citySwitch\">\r\n        {\r\n          cities.map(city =>\r\n            <div\r\n              onClick={() => cityToDisplay(city.name, city.id)}\r\n              className={`${city.name === selectedCity.name ? \"citySwitchTownActive\" : \"citySwitchTown\"}`}\r\n              key={city.id}>\r\n              {city.name}\r\n            </ div>\r\n          )\r\n        }\r\n      </div>\r\n      <>\r\n        {\r\n          selectedCity.name ?\r\n            <SingleTown key={selectedCity.id} propsCity={selectedCity} /> :\r\n            <div className=\"loader\">Loading...</div>\r\n        }\r\n      </>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StartView;","import React, { useEffect, useState } from 'react'\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport '../App.css'\r\nimport firebase from '../firebase';\r\n\r\nfunction ResultsComponent() {\r\n  const api = {\r\n    base: \"https://api.openweathermap.org/data/2.5/\",\r\n    key: \"26f7c14de162ddf380af26c56863bd3a\"\r\n  }\r\n\r\n  const [weather, setWeather] = useState({});\r\n\r\n  let { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    fetch(`${api.base}weather?q=${id.trim()}&units=metric&lang=hr&appid=${api.key}`)\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        setWeather(result)\r\n      })\r\n  }, [id, api.base, api.key])\r\n\r\n  const saveCityToFirestore = (e) => {\r\n    e.preventDefault();\r\n    const db = firebase.firestore()\r\n    db.collection('cities').add({ name: id })\r\n    history.push('/');\r\n  }\r\n\r\n  let history = useHistory();\r\n\r\n  const returnHome = () => {\r\n    history.push('/');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        weather.main &&\r\n        <>\r\n          <div className=\"weatherResults\">\r\n            <div className=\"locationBox\">\r\n              {weather.name}, {weather.sys.country}\r\n            </div>\r\n            <div className=\"weatherBox\">\r\n              <img src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@4x.png`} alt=\"\" />\r\n              <div className=\"weatherBoxInfo\">\r\n                <div className=\"weather\">{weather.weather[0].description}</div>\r\n                <div className=\"temp\">{Math.round(weather.main.temp)} Â°C</div>\r\n                <div className=\"realFeel\">\r\n                  Dojam: {Math.round(weather.main.feels_like)} Â°C<br></br>\r\n                  Vjetar: {Math.round(weather.wind.speed * 3.6)} km/h<br></br>\r\n                  Maksimalno: {Math.round(weather.main.temp_max)} Â°C<br></br>\r\n                  Minimalno: {Math.round(weather.main.temp_min)} Â°C<br></br>\r\n                  Tlak zraka: {Math.round(weather.main.pressure)} hPa<br></br>\r\n                  Vlaga: {Math.round(weather.main.humidity)} %</div>\r\n              </div>\r\n            </div>\r\n            <button className=\"followCity\" onClick={saveCityToFirestore}>Prati grad</button>\r\n          </div>\r\n          <button className=\"returnBtn\" onClick={returnHome}>Natrag</button>\r\n        </>\r\n      }\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default ResultsComponent;","import React from 'react';\r\nimport SearchComponent from '../components/SearchComponent';\r\nimport ResultsComponent from '../components/ResultsComponent';\r\n\r\n\r\nfunction ResultsScreen() {\r\n  return (\r\n    <>\r\n      <SearchComponent />\r\n      <ResultsComponent />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResultsScreen;","import React, { useEffect, useState } from 'react';\r\nimport '../App.css';\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nfunction DetailedTown() {\r\n\r\n  const { name } = useParams();\r\n  const [city, setCity] = useState({});\r\n\r\n  const api = {\r\n    base: \"https://api.openweathermap.org/data/2.5/forecast?\",\r\n    search: \"&lang=hr&units=metric\",\r\n    key: \"26f7c14de162ddf380af26c56863bd3a\"\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch(`${api.base}q=${name}&appid=${api.key}${api.search}`)\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        setCity(result)\r\n      })\r\n  }, [api.base, api.key, api.search, name])\r\n\r\n  let history = useHistory();\r\n\r\n  const returnHome = () => {\r\n    history.push('/');\r\n  }\r\n\r\n  let weatherReport = null;\r\n\r\n  if (city.list) {\r\n    weatherReport = city.list.map(hour => {\r\n      const date = new Date(hour.dt * 1000);\r\n      return (\r\n        <div className=\"detailsBox\" key={hour.dt}>\r\n          <img \r\n          src={`http://openweathermap.org/img/wn/${hour.weather[0].icon}@2x.png`} \r\n          alt={name} \r\n          title={hour.weather[0].description}\r\n          />\r\n          <div className=\"detailsBoxInfo\">\r\n            <div className=\"detailsWeather\">{hour.weather[0].description}</div>\r\n            <div className=\"detailsTemp\">{Math.round(hour.main.temp)} Â°C</div>\r\n            <div className=\"detailsRealFeel\">\r\n              Dojam: {Math.round(hour.main.feels_like)} Â°C<br></br>\r\n              Vjetar: {Math.round(hour.wind.speed * 3.6)} km/h<br></br>\r\n              {date.getHours()}:00, {date.getDate()}.{date.getMonth() + 1}.{date.getFullYear()}.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        weatherReport ?\r\n          < div className=\"weatherResults\" >\r\n            <div className=\"locationBox\">\r\n              {city.city.name}\r\n            </div>\r\n            {/* <div className=\"weatherBox\">\r\n              <img \r\n              src={`http://openweathermap.org/img/wn/${city.list[0].weather[0].icon}@4x.png`} \r\n              alt={city.city.name}\r\n              title={city.list[0].weather[0].description} \r\n              />\r\n              <div className=\"weatherBoxInfo\">\r\n                <div className=\"weather\">{city.list[0].weather[0].description}</div>\r\n                <div className=\"temp\">{Math.round(city.list[0].main.temp)} Â°C</div>\r\n                <div className=\"realFeel\">\r\n                  Dojam: {Math.round(city.list[0].main.feels_like)} Â°C<br></br>\r\n                  Vjetar: {Math.round(city.list[0].wind.speed * 3.6)} km/h\r\n                </div>\r\n              </div>\r\n            </div> */}\r\n            {weatherReport}\r\n            <div className=\"options\">\r\n              <button className=\"returnBtn\" onClick={returnHome}>Natrag</button>\r\n            </div>\r\n          </div >\r\n          :\r\n          <div className=\"loader\">Loading...</div>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DetailedTown;","import React from 'react';\r\nimport SearchComponent from '../components/SearchComponent';\r\nimport DetailedTown from '../components/DetailedTown';\r\n\r\nfunction DetailedView() {\r\n  return (\r\n    <>\r\n      <SearchComponent />\r\n      <DetailedTown />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DetailedView;","import React from 'react';\r\nimport '../App.css';\r\nimport { useState } from 'react';\r\n\r\nfunction AuthView() {\r\n\r\n  const [signin, setSignin] = useState(true);\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleSignIn = (event) => {\r\n    event.preventDefault();\r\n    console.log(email + \" \" + password)\r\n  }\r\n\r\n  const handleSignUp = () => {\r\n    console.log(email + \" \" + password)\r\n  }\r\n\r\n  return (\r\n  <>\r\n      <form onSubmit={handleSignIn}>\r\n        <label htmlFor=\"email\" />\r\n        <input type=\"email\" name=\"email\" id=\"email\" onChange={(e) => setEmail(e.target.value)} />\r\n        <label htmlFor=\"password\" />\r\n        <input type=\"password\" name=\"password\" id=\"password\" onChange={(e) => setPassword(e.target.value)} />\r\n        <button type=\"submit\">Sign In</button>\r\n      </form>\r\n  </>\r\n)\r\n\r\n}\r\n\r\nexport default AuthView;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport StartView from './containers/StartView';\nimport ResultsScreen from './containers/ResultsScreen';\nimport DetailedView from './containers/DetailedView';\nimport AuthView from './containers/AuthView';\n\nfunction App() {\n\n\n  return (\n    <div className=\"main-container\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={StartView} />\n          <Route path=\"/results/:id\" component={ResultsScreen} />\n          <Route path=\"/details/name=:name\" component={DetailedView} />\n          <Route path=\"/authorisation\" component={AuthView} />\n          <Route path=\"*\" component={StartView} />\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}